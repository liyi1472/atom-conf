"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const R = require("ramda");
const supi_1 = require("supi");
const createStoreController_1 = require("../createStoreController");
exports.default = (input, opts) => __awaiter(this, void 0, void 0, function* () {
    const cwd = opts && opts.prefix || process.cwd();
    const store = yield createStoreController_1.default(opts);
    const linkOpts = Object.assign(opts, {
        store: store.path,
        storeController: store.ctrl,
    });
    // pnpm link
    if (!input || !input.length) {
        yield supi_1.linkToGlobal(cwd, linkOpts);
        return;
    }
    const result = R.partition((inp) => inp.startsWith('.'), input);
    const localLinkedPkgs = result[0];
    const globalLinkedPkgs = result[1];
    yield supi_1.link(localLinkedPkgs, path.join(cwd, 'node_modules'), linkOpts);
    yield supi_1.linkFromGlobal(globalLinkedPkgs, cwd, linkOpts);
});
//# sourceMappingURL=link.js.map